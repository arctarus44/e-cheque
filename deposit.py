import tools
import sys
import os
from configparser import ConfigParser
from rsa import RSA
from re import split

ALREADY_PAY_IN = "This cheque is already pay in."
PAY_IN = "This cheque is cashed now."
CUSTOMER_NOT_FOUND = "The customer {0} is not found is the database."


def decode_sign(sign, pub_k):
	"""Decode the signature with pub_k as an instance of RSA
	and retourne the result as a ConfigParser instance corresponding to the
	decoded content."""
	decoded = pub_k.check_signature(seller_sign)

	tmp = open(tools.TMP_FILE, 'w')
	tmp.write(decoded)
	tmp.close()

	decoded_cp = ConfigParser()
	decoded_cp.read(tools.TMP_FILE)
	os.remove(tools.TMP_FILE)
	return decoded_cp

def cashed_cheque(cheque):
	"""Cashed the cheque"""
	drawee = cheque[tools.SCT_C_CHEQUE][tools.OPT_C_DRAWER]
	total = cheque[tools.SCT_C_CHEQUE][tools.OPT_C_TOTAL]
	transac_id = cheque[tools.SCT_C_CHEQUE][tools.OPT_C_TRANS_ID]

	db_fname = os.path.join(tools.DIR_BANK, tools.FILE_BANK_DB)
	database = ConfigParser()
	database.read(db_fname)
	database.set(drawee, transac_id, total)

	with open(db_fname, 'w') as db_f:
		database.write(db_f)


def check_pay_in(cheque):
	"""Cheque if the cheque is already pay in. Return True if the cheque
	is already pay in. False otherwise."""
	database = ConfigParser()
	database.read(os.path.join(tools.DIR_BANK, tools.FILE_BANK_DB))

	drawee = cheque[tools.SCT_C_CHEQUE][tools.OPT_C_DRAWER]
	transac_id = cheque[tools.SCT_C_CHEQUE][tools.OPT_C_TRANS_ID]
	total = cheque[tools.SCT_C_CHEQUE][tools.OPT_C_TOTAL]


	if database.has_option(drawee, transac_id):
		value = int(database.has_option(drawee, transac_id))
		return value == total
	else:
		return False


if __name__ == "__main__":

	bank_prk_fname = os.path.join(tools.DIR_BANK, tools.FILE_PUB_KEY)

	seller_puk_sing_fname = os.path.join(tools.DIR_BANK,
										 tools.ROLE_SELLER,
										 tools.FILE_PUB_SIGN)

	seller_puk = tools.decode_public_key(seller_puk_sing_fname,
										 bank_prk_fname,
										 tools.ROLE_BANK)

	seller_puk = RSA(int(seller_puk[tools.SCT_K_KEY][tools.OPT_K_N]),
					 int(seller_puk[tools.SCT_K_KEY][tools.OPT_K_E]))

	# Read the seller's signature from stdin and retreive the cheque's
	# signature generated by the drawee
	seller_sign = tools.read_stdin()
	drawee_sign = decode_sign(seller_sign, seller_puk)

	# Decode the cheque
	drawee_puk_sing_fname = os.path.join(tools.DIR_BANK,
										 tools.DIR_SELLER,
										 tools.FILE_PUB_SIGN)

	drawee_puk = tools.decode_public_key(seller_puk_sing_fname,
										 bank_prk_fname,
										 tools.ROLE_BANK)

	cheque = decode_sign(drawee_sign, customer_puk)

	tmp = open(tools.TMP_FILE, 'w')
	tmp.write(cheque)
	tmp.close()

	cheque = ConfigParser()
	cheque.read(tools.TMP_FILE)
	os.remove(tools.TMP_FILE)

	if check_pay_in(cheque): # the check are already pay in
		print(ALREADY_PAY_IN)
		exit(1)
	else:
		try:
			cashed_cheque(cheque)
		except KeyError:
			print(CUSTOMER_NOT_FOUND.format(drawee), file=sys.stderr)
		print(PAY_IN)
